generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId   String  @unique
  name     String
  email    String  @unique
  imageUrl String
  isAdmin  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cartItems CartItem[]
  orders    Order[]
}

model CartItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  count Int

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  food   Food   @relation(fields: [foodId], references: [id], onDelete: Cascade)
  foodId String @db.ObjectId

  isPaid Boolean @default(false)
}

model Food {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  category String
  photo    String

  price  Float
  review Float @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sizes      Size[]
  cartItems  CartItem[]
  orderItems OrderItem[]
  Purchases  Purchase[]
}

model Size {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  size  FoodSize
  price Float

  food   Food   @relation(fields: [foodId], references: [id], onDelete: Cascade)
  foodId String @db.ObjectId

  orderItems OrderItem[]
}

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User        @relation(fields: [userId], references: [id])
  userId String      @db.ObjectId
  status OrderStatus

  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String @db.ObjectId

  food   Food   @relation(fields: [foodId], references: [id], onDelete: Cascade)
  foodId String @db.ObjectId

  quantity Int

  size   Size?   @relation(fields: [sizeId], references: [id], onDelete: Cascade)
  sizeId String? @db.ObjectId
}

model StripeCustomer {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String

  foodId String @db.ObjectId
  food   Food   @relation(fields: [foodId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

enum FoodSize {
  SMALL
  MEDIUM
  LARGE
}

enum OrderStatus {
  WAITING_FOR_PAYMENT
  DELIVERY_PENDING
  DELIVERED
}

model Test {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  count Int
}
